package me.nullnet.voxelclient.commands.impl;

import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.builder.RequiredArgumentBuilder;
import com.mojang.brigadier.context.CommandContext;
import java.util.Objects;
import me.nullnet.voxelclient.exploits.AtlasExploit;
import me.nullnet.voxelclient.exploits.AuthMeVelocityExploit;
import me.nullnet.voxelclient.exploits.CMDBRIExploit;
import me.nullnet.voxelclient.exploits.ChatSentryExploit;
import me.nullnet.voxelclient.exploits.CloudSyncExploit;
import me.nullnet.voxelclient.exploits.DRSExploit;
import me.nullnet.voxelclient.exploits.ECBExploit;
import me.nullnet.voxelclient.exploits.LuckPermsExploit;
import me.nullnet.voxelclient.exploits.SignedVelocityExploit;
import me.nullnet.voxelclient.exploits.SpeedExploit;
import me.nullnet.voxelclient.exploits.T2CExploit;
import me.nullnet.voxelclient.exploits.ViaVersionExploit;
import me.nullnet.voxelclient.exploits.WorldEditExploit;
import me.nullnet.voxelclient.utils.ColorUtil;
import net.fabricmc.fabric.api.client.command.v2.ClientCommandManager;
import net.fabricmc.fabric.api.client.command.v2.ClientCommandRegistrationCallback;
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource;
import net.minecraft.class_310;
import net.minecraft.class_634;
import net.minecraft.class_640;

public class ExploitCommand {
   public void register() {
      ClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -> {
         dispatcher.register((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)((LiteralArgumentBuilder)ClientCommandManager.literal("exploit").executes(ExploitCommand::executeRoot)).then(((LiteralArgumentBuilder)ClientCommandManager.literal("viaversion").executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("packets", IntegerArgumentType.integer()).executes(ViaVersionExploit::execute)))).then(ClientCommandManager.literal("authmevelocity").executes(AuthMeVelocityExploit::execute))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("speed").executes(ExploitCommand::executeRoot)).then(((RequiredArgumentBuilder)ClientCommandManager.argument("packets", IntegerArgumentType.integer()).executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("pps", IntegerArgumentType.integer()).executes(SpeedExploit::execute))))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("atlas").executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("command", StringArgumentType.greedyString()).executes(AtlasExploit::execute)))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("cmdbri").executes(ExploitCommand::executeRoot)).then(((RequiredArgumentBuilder)ClientCommandManager.argument("serverID", StringArgumentType.word()).executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("command", StringArgumentType.word()).executes(CMDBRIExploit::execute))))).then(((LiteralArgumentBuilder)((LiteralArgumentBuilder)ClientCommandManager.literal("chatsentry").executes(ExploitCommand::executeRoot)).then(((LiteralArgumentBuilder)ClientCommandManager.literal("bungee").executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("command", StringArgumentType.greedyString()).executes(ChatSentryExploit::executeBungee)))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("backend").executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("command", StringArgumentType.greedyString()).executes(ChatSentryExploit::executeBackend))))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("cloudsync").executes(ExploitCommand::executeRoot)).then(((RequiredArgumentBuilder)ClientCommandManager.argument("player", StringArgumentType.greedyString()).executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("command", StringArgumentType.greedyString()).executes(CloudSyncExploit::execute))))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("drs").executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("command", StringArgumentType.greedyString()).executes(DRSExploit::execute)))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("ecb").executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("command", StringArgumentType.greedyString()).executes(ECBExploit::execute)))).then(ClientCommandManager.literal("luckperms").executes(LuckPermsExploit::execute))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("signedvelocity").executes(ExploitCommand::executeRoot)).then(((RequiredArgumentBuilder)ClientCommandManager.argument("user", StringArgumentType.word()).suggests((ctx, builder) -> {
            String partialName;
            try {
               partialName = ((String)ctx.getArgument("user", String.class)).toLowerCase();
            } catch (IllegalArgumentException var4) {
               partialName = "";
            }

            if (partialName.isEmpty()) {
               ((class_634)Objects.requireNonNull(class_310.method_1551().method_1562())).method_2880().forEach((playerListEntry) -> {
                  builder.suggest(playerListEntry.method_2966().getName());
               });
               return builder.buildFuture();
            } else {
               ((class_634)Objects.requireNonNull(class_310.method_1551().method_1562())).method_2880().stream().map(class_640::method_2966).filter((player) -> {
                  return player.getName().toLowerCase().startsWith(partialName.toLowerCase());
               }).forEach((profile) -> {
                  builder.suggest(profile.getName());
               });
               return builder.buildFuture();
            }
         }).executes(ExploitCommand::executeRoot)).then(ClientCommandManager.argument("command", StringArgumentType.greedyString()).executes(SignedVelocityExploit::execute))))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("t2c").then(ClientCommandManager.argument("command", StringArgumentType.greedyString()).executes(T2CExploit::execute))).executes(ExploitCommand::executeRoot))).then(((LiteralArgumentBuilder)ClientCommandManager.literal("worldedit").then(ClientCommandManager.argument("packets", IntegerArgumentType.integer()).executes(WorldEditExploit::execute))).executes(ExploitCommand::executeRoot)));
      });
   }

   private static int executeRoot(CommandContext<FabricClientCommandSource> context) {
      ((FabricClientCommandSource)context.getSource()).sendFeedback(ColorUtil.translate("&8[&5&lVoxel&8] &cBad usage!"));
      return 1;
   }
}
